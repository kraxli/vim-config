
- {repo: plasticboy/vim-markdown, if: 0, hook_post_source: source $VIM_PATH/after/ftplugin/markdown.vim}
- {repo: vimwiki/vimwiki, if: 0}

## -------------------------------------------------------
## Coding / Programming Langues Support
## -------------------------------------------------------

- {repo: tmhedberg/SimpylFold, on_ft: [python]}


# for an alternative see: https://github.com/axvr/zepl.vim
- repo:  hkupty/iron.nvim
  if: has('nvim')
  on_cmd: [ IronRepl, IronReplHere, IronFocus, IronSend, IronWatchCurrentFile ]
  on_map: { nv: <Plug> }
  on_func: IronUnwatchFile
  hook_add: let g:iron_map_defaults = 0 | let g:iron_map_extended = 0
  hook_source: luafile $VIM_PATH/config/plugins/iron.lua


# - {repo: rafi/vim-venom, on_ft: [python]}

##  ----- debuggin -----
## see: https://alpha2phi.medium.com/neovim-dap-enhanced-ebc730ff498b

- repo: nvim-telescope/telescope-dap.nvim
  if: has('nvim-0.5')
  lazy: true


- repo: mfussenegger/nvim-dap
  if: has('nvim-0.5')
  depends: [ auto-session, telescope.nvim, nvim-dap-python, nvim-dap-ui ]
  hook_post_source: lua require('plugins.dap')


- repo: mfussenegger/nvim-dap-python
  if: has('nvim-0.5')
  lazy: true
  hook_post_source: lua require('plugins.dap-python')


- repo: rcarriga/nvim-dap-ui
  if: has('nvim-0.5')
  lazy: true
  hook_post_source: lua require('plugins.dap-ui')
  # depends: [nvim-dap, nvim-dap-python]

# TODO
# see: https://alpha2phi.medium.com/neovim-dap-enhanced-ebc730ff498b
# -repo: rcarriga/vim-ultest
# -repo: Pocco81/DAPInstall.nvim

# TODO
# - repo: theHamsta/nvim-dap-virtual-text
#   hook_post_source: lua vim.g.dap_virtual_text = true

- repo: jalvesaq/Nvim-R

## -------------------------------------------------------
## Vimwiki & Zettel & Markdown
## -------------------------------------------------------

- repo: ekickx/clipboard-image.nvim
  on_ft: [markdown, text, vimwiki]


- repo: kraxli/vimwiki
  rev: nvim-compe
  on_ft: [ vimwiki, markdown ]
  on_map: { n: <Plug> }
  on_cmd: [ VimwikiIndex, VimwikiUISelect ]
  hook_add: |-
    let g:vimwiki_conceallevel = 2
    let g:vimwiki_folding = 'custom'
    let g:vimwiki_use_calendar = 1
    let g:vimwiki_hl_headers = 1
    let g:vimwiki_hl_cb_checked = 1
    let g:vimwiki_autowriteall = 0
  hook_source: |-
    let g:vimwiki_list = [
    \   { 'diary_header': 'Diary',
    \     'diary_link_fmt': '%Y-%m/%d',
    \     'auto_toc': 1,
    \     'path': '~/docs/wiki/',
    \     'syntax': 'markdown',
    \     'ext': '.md' },
    \   { 'path': '~/docs/books/',
    \     'syntax': 'markdown',
    \     'ext': '.md' }
    \ ]
    let s:nested_syntax = {'py': 'python', 'sh': 'bash', 'json': 'javascript'}
    let s:vimwiki_list_zettel = {
        \ 'path': exists('g:dir_zettelk') && g:dir_zettelk != '' ? g:dir_zettelk : '~/Dropbox/PKD/zettelk/',
        \ 'ext':'.md',
        \ 'syntax':'markdown',
        \ 'links_space_char': '-',
        \ 'nested_syntaxes': s:nested_syntax,
        \ }
    let g:vimwiki_list = add(g:vimwiki_list, s:vimwiki_list_zettel)



#- repo: vimwiki/vimwiki
#   on_ft: [ vimwiki, markdown ]
#   hook_add: |
#     let g:vimwiki_folding = 'custom'
#     augroup VimrcAuGroup
#       autocmd!
#       autocmd FileType vimwiki,markdown,vimwiki.markdown setlocal foldmethod=expr |
#         \ setlocal foldenable | set foldexpr=markdown#MkdFoldLevelSimple(v:lnum)
#     augroup END
#     let g:vimwiki_filetypes = [ 'markdown' ]
#     let g:vimwiki_listsyms = ' ○◐●x'
#     let g:vimwiki_conceallevel = 1
#     let g:vimwiki_use_calendar = 1
#     let g:vimwiki_hl_headers = 1
#     let g:vimwiki_hl_cb_checked = 1
#     let g:vimwiki_autowriteall = 0
#     let g:vimwiki_global_ext = 1
#     let g:vimwiki_ext2syntax = {'.wiki': 'markdown', '.md': 'markdown', '.mkd': 'markdown'}
#     let s:nested_syntax = {'py': 'python', 'sh': 'bash', 'json': 'javascript'}
#     let g:vimwiki_list = [
#     \   { 'diary_header': 'Diary',
#     \     'diary_link_fmt': '%Y-%m-%d',
#     \     'links_space_char': '-',
#     \     'path': exists('g:dir_wiki') && g:dir_wiki != '' ? g:dir_wiki : '~/Dropbox/PKD/',
#     \     'auto_toc': 1,
#     \     'syntax': 'markdown',
#     \     'ext': '.md',
#     \     'nested_syntaxes': s:nested_syntax
#     \   },
#     \   {
#     \     'path': exists('g:dir_blog') && g:dir_blog != '' ? g:dir_blog : '~/Dropbox/PKD/blog_posts/',
#     \     'syntax': 'markdown',
#     \     'links_space_char': '-',
#     \     'ext': '.md',
#     \     'nested_syntaxes': s:nested_syntax
#     \   },
#     \ ]
#     let g:vimwiki_key_mappings =
#     \   { 'table_mappings': 0,
#     \   }
#     nmap <c-t> <Plug>VimwikiToggleListItem<cr>
#     vmap <c-t> <Plug>VimwikiToggleListItem<cr>
#     nmap <c-space> <Plug>VimwikiToggleListItem<cr>
#     vmap <c-space> <Plug>VimwikiToggleListItem<cr>
#     nmap '' <Plug>VimwikiNextLink<cr>
#     nmap '' <Plug>VimwikiPrevLink<cr>
#     let g:vimwiki_markdown_link_ext = 1


- repo: kraxli/vim-mkd-org
  on_ft: [ markdown, vimwiki ]
  hook_add: |
    let g:mkdd_task_done_symbols = ''
    let g:mkdd_mapping_switch_status = 0
    let g:mkdd_mapping_switch_status_down = 0
    let g:mkdd_wiki_index_key = '<leader>W'
    let g:mkdd_blog_index_key = '<leader>B'
    au BufReadPre,BufEnter,BufRead,BufNewFile *.wiki,*.md set foldmethod=expr


- repo: kraxli/vim-zettel
  on_ft: [ markdown, vimwiki, vimwiki.markdown ]
  on_cmd: [ ZettelSearch, ZettelNew, ZettelOpen, ZettelAnchor, ZetAi, ZetAo, ZetO, ZetN ]
  depends: vimwiki
  hook_add: |
    let g:zettel_default_mappings=0
    au FileType vimwiki,markdown,vimwiki.markdown imap ]s <esc><Plug>ZettelSearchMap
    au FileType vimwiki,markdow,vimwiki.markdown imap ]a <esc><Plug>ZettelAnchorInsert
    au FileType vimwiki,markdow,vimwiki.markdown imap <c-r> <esc><Plug>ZettelAnchorInsert
    au FileType vimwiki,markdow,vimwiki.markdown nmap T <Plug>ZettelYankNameMap
    au FileType vimwiki,markdow,vimwiki.markdown xmap z <Plug>ZettelNewSelectedMap
    au FileType vimwiki,markdow,vimwiki.markdown nmap gZ <Plug>ZettelReplaceFileWithLink
    nmap <leader>zo :ZettelOpen<cr>
    nnoremap <leader>zn :ZettelNew<space>
    let g:vimwiki_markdown_link_ext = 1
    function! s:insert_id()
        let ext = vimwiki#vars#get_wikilocal('ext')
        return zettel#vimwiki#count_files("*" . ext)
    endfunction
    let s:zettel_options_spec = {"front_matter" : [["tags", ""], ["type", "note"], [ "id" , function("s:insert_id")]], "template" :  ""}
    let g:zettel_options = [s:zettel_options_spec, {}, s:zettel_options_spec]
    let g:zettel_format = "Zet%file_no-%Y%m%d-%title"
    let g:zettel_date_format = "%Y-%m-%d"


- repo: iamcco/markdown-preview.nvim
  build: sh -c "cd app && ./install.sh"
  on_ft: [ vimwiki, markdown ]
  on_cmd: [MarkdownPreview, MarkdownPreviewToggle]
  hook_add: |
    let g:mkdp_auto_start = 0
    let g:mkdp_auto_close = 0
    let g:mkdp_browser=''
    let g:mkdp_page_title = '${name}'
    let g:mkdp_filetypes = ['markdown', 'vimwiki']
    command! Pv :MarkdownPreview
    nmap <leader>pv <Plug>MarkdownPreviewToggle

## -------------------------------------------------------
## UltiSnips
## -------------------------------------------------------

- repo: SirVer/ultisnips
  if: has('python3')
  on_event: FileType
  hook_add: |
    let g:UltiSnipsSnippetDirectories=["UltiSnips", "snippets/UltiSnips"]
    let g:UltiSnipsExpandTrigger = '<C-l>'
    let g:UltiSnipsListSnippets = '<C-Tab>'
    let g:UltiSnipsJumpForwardTrigger = '<Tab>'
    let g:UltiSnipsJumpBackwardTrigger = '<S-Tab>'
  hook_post_source:
    UltiSnipsAddFiletypes vimwiki.markdown
    UltiSnipsAddFiletypes vimwiki.writer

#    let g:UltiSnipsListSnippets = ''
#    let g:UltiSnipsJumpForwardTrigger = '<C-f>'
#    let g:UltiSnipsJumpBackwardTrigger = '<C-b>'
#    let g:UltiSnipsExpandTrigger = '<C-l>'
#    let g:UltiSnipsListSnippets = '<C-Tab>'


- repo: honza/vim-snippets
  depends: ultisnips
  on_event: FileType
  if: has('python3')
  merged: 0


- repo: kraxli/vim-snips
  depends: ultisnips
  on_event: FileType
  if: has('python3')
  merged: 0

## -------------------------------------------------------
## Miscellaneous
## -------------------------------------------------------

- repo: liuchengxu/vista.vim
  on_cmd: Vista
  hook_add: |-
    let g:vista#renderer#enable_icon = 1
    let g:vista_echo_cursor_strategy = 'scroll'
    let g:vista_vimwiki_executive = 'markdown'
    let g:vista_executive_for = {
      \ 'vimwiki': 'markdown',
      \ 'pandoc': 'markdown',
      \ 'markdown': 'toc',
      \ }


- repo: junegunn/fzf
  build: sh -c "vim -c fzf#install()"
  merged: 0
  on_cmd: FZF
  type__depth: 1
  hook_source: |-
    let g:fzf_layout = { 'down': '40%' }


- repo: junegunn/fzf.vim
  depends: fzf
  merged: 0
  on_cmd: [ Files, GitFiles, Buffers, Lines, Locate, Colors, Ag, Rg, Tags, GLog, History, HistoryS, HistoryC, Maps, BCommits, Commits, Windows, Helptags, Marks, Commands, Snippets, BTags, Tags, Locate, Colors, BLines, GFiles ]
  on_func: [ fzf#vim#with_preview, fzf#run, vista#finder#fzf#Run, fzf#vim#complete, fzf#wrap ]
  hook_source: source $VIM_PATH/config/plugins/fzf.vim
  hook_add: |
    let g:fzf_height = '40%'
    let g:fzf_commits_log_options = '--graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr (%cs), %an"'
    let g:fzf_colors = {
      \ 'fg': ['fg', 'Normal'],
      \ 'bg': ['bg', 'Pmenu']
      \ }
    let g:fzf_history_dir = $DATA_PATH . '/fzf'

- {repo: kraxli/fzf-quickfix, on: Quickfix}

- repo: dominickng/fzf-session.vim
  on_cmd: [Session, SLoad, SDelete, SQuit, SList, Sessions]
  hook_add: let g:fzf_session_path = $DATA_PATH . '/session'


# qpkorr/vim-renamer
- repo: kraxli/vim-renamer
  on_cmd: Renamer
  hook_add: |
    if has('dos16')||has('dos32')||has('win16')||has('win32')||has('win64')
    \ ||has('win32unix')||has('win95')
      let g:RenamerShowHidden=0
    else
      let g:RenamerShowHidden=1
    endif


# - repo: kraxli/vim-mkd-fold
#   hook_add: |
#     let g:markdown_list_folding = 1
#     let g:mkdd_use_mkdx = 1
#     au FileType vimwiki,markdown set foldmethod=expr


- repo: embear/vim-foldsearch
  on_cmd: [Fw, Fs, Fp, FS, Fl, Fc, Fi, Fd, Fe, TasksOpen]
  on_map: [to]
  on_ft: [text, vimwiki, markdown]
  hook_add: |
    let g:foldsearch_highlight=0
    let g:foldsearch_disable_mappings=1
    nmap  <Leader>fw :Fw<cr>
    nmap  <Leader>fs :Fs<cr>
    nmap  <Leader>fS :FS<cr>
    nmap  <Leader>fl :Fl<cr>
    nmap  <Leader>fi :Fi<cr>
    nmap  <Leader>fd :Fd<cr>
    nmap  <Leader>fe :Fe<cr>
    nmap  <silent>ze :Fe<cr>

############
#  Coding  #
############

- repo: michaelb/sniprun
  on_cmd: [SnipRun, SnipInfo]
  build: bash install.sh


- repo:  hkupty/iron.nvim
  hook_add: |
    let g:iron_map_defaults=0

## =======================================================
## Legacy:
## =======================================================

# # ---
# # PLUGINS local to kraxli/vim-config
# # see: ~/.cache/vim/dein/repos
# # ==========================================
#
# # --- Disable plugins from Rafi ---
# - {repo: rhysd/vim-gfm-syntax, if: 0}
# # - {repo: vimwiki/vimwiki, if: 0}
# - {repo: nathanaelkane/vim-indent-guides, if: 0}
# - {repo: kraxli/vim-markdown, if: 0}
# # - {repo: plasticboy/vim-markdown, if: 0}
# # - {repo: prabirshrestha/vim-lsp, if: 0 }
# # - {repo: mattn/vim-lsp-settings, if: 0}
# # - {repo: liuchengxu/vim-which-key, if: 0}
#
#
# # --------------------------------------------------
# # Base plugins
# # --------------------------------------------------
#
# # - repo: folke/which-key.nvim
#
# # inkarkat/vim-UnconditionalPaste
#
# - repo: pbrisbin/vim-mkdir
#
# - repo: Yggdroot/indentLine
#   hook_add: |
#     let g:indentLine_char_list = ['¦', '┊']
#     let g:indentLine_concealcursor = 'nc'
#     let g:indentLine_conceallevel = 2
#
# # let g:indentLine_char_list = ['|', '¦', '┆', '┊'] or ¦, ┆, │, ⎸, ▏, ':'
# # let g:indentLine_concealcursor = 'inc'
#
# # - repo: kraxli/vim-config-addons
#
# # --------------------------------------------------
# # Lazily loading plugins
# # --------------------------------------------------
#
# - repo: tpope/vim-scriptease
#   on_cmd: [Scriptnames, Messages, Time, Breakadd, Breakdel, PP, Runtime, Disarm, Verbose, Vedit, Vsplit, Vtabedit]
#   on_map: [zS, g=] # K
#
# - repo: tpope/vim-fugitive
#   on_cmd: [ G, Git, Gedit, Gsplit, Gvsplit, Gfetch, Gpush, Gpull, Glog, Gclog, Gdiffsplit, Gbrowse, Gread, Gwrite, Ggrep, Gmove, Grename, Gdelete, Gblame, Gmerge, Ghdiffsplit, Gvdiffsplit, Gwq, Gpedit, Gtabedit, Glcd, Gcd, 0Git, Glgrep, Ggrep, Gfetch, Gcommit ]
#   hook_add: |
#     let g:fugitive_summary_format = '[%cs, %an] %s'
#   hook_source:
#     augroup user_fugitive_plugin
#       autocmd!
#       autocmd FileType fugitiveblame normal A
#     augroup END
#
# # if: exists(expand(execute('pwd') . '/.git', 1))
# # Git mergetool, Git difftool
#
# - repo: tpope/vim-vinegar
#   on_cmd: [Ex, Explore, Vexplore, V]
#   on_ft: netrw
#
# - repo: junegunn/gv.vim
#   depends: vim-fugitive
#   on_cmd: GV
#
# - repo: junegunn/vim-peekaboo
#   on_map: [\", \@, CTRL-R]
#
#
# - repo: vim-scripts/VisIncr
#   on_cmd: [I, II, IMOD, IREP, IMDY, IYMD, IDMY, ID, IM, IA, IX, IIX, IB, IIB,
#            \  IO, IIO, IR, IIR, IPOW, IIPOW, RI, RII, RIMOD, RIREP, RIMDY,
#            \  RIYMD, RIDMY, RID, RIM, RIA, RIX, RIIX, RIB, RIIB, RIO, RIIO, RIR,
#            \  RIIR, RIPOW, RIIPOW]
#
# - repo: skywind3000/asyncrun.vim
#   on_cmd: [AsyncRun, AsyncStop]
#   hook_add: |
#     let g:asyncrun_open = 12
#
# # TODO: check out and familiarize in more details
# - repo: skywind3000/asynctasks.vim
#   on_source: 'skywind3000/asyncrun.vim'
#   on_cmd: [AsyncTask, AsyncTaskEdit]
#
# # - repo:  skywind3000/asyncrun.extra
# #   on_cmd: [AsyncRun, AsyncStop]
#
# # - {repo: JoshMcguigan/estream, build: sh ./install.sh v0.2.0}
#
#
# # -- ColorSchemes --
# # see config/theme.vim for speedup config/init.vim
# - {repo: tomasiser/vim-code-dark, on_cmd: colorscheme codedark}
# - {repo: NLKNguyen/papercolor-theme, on_cmd: colorscheme PaperColor}
# - {repo: sjl/badwolf, on_cmd: colorscheme badwolf}
#
# - {repo: tpope/vim-repeat, on_map: .}
#
#
# - repo:  samoshkin/vim-mergetool
#   on_cmd: [MergetoolStart, MergetoolToggle]
#
#
# # - repo: metakirby5/codi.vimcodi
# #   on_cmd: Codi
#
# - repo: dbakker/vim-projectroot
#   on_cmd: [ProjectRootLCD, ProjectLCD, ProjectRootExe, ProjectRootCD]
#   hook_add: |
#     let g:rootmarkers = ['.git', 'dub.json', 'dub.sdl', 'index.md',
#     \ 'index.wiki', '.projectroot', '.svn']
#     augroup user_project_root
#       autocmd!
#       autocmd! BufEnter,BufRead *.* ProjectRootLCD
#     augroup END
#
# # doesn't work with lazy loading but seems to be loaded lazily by default
# - repo: pianocomposer321/project-templates.nvim
#
# # - repo: tibabit/vim-templates
# #   on_cmd: [TemplateInit]
# #
# # - repo: aperezdc/vim-template
#
# - repo: samoshkin/vim-mergetool
#   on_cmd: [MergetoolToggle, MergetoolStart]
#   hook_add: nmap ;mt <plug>(MergetoolToggle)
#
#
# # - repo: kraxli/vim-shell
# - repo: xolox/vim-shell
#   on_cmd: Open
#   on_map: <F6>
#   hook_add: |
#     let g:shell_verify_urls = 1
#     nmap gx <Nop>
#     vmap gx <Nop>
#     nmap gx :Open<cr>
#     vmap gx :Open<cr>
#
# # - repo: xolox/vim-misc
# - repo: kraxli/vim-misc
#   on_source: vim-shell
#   hook_add: |
#     let g:wsl_mount_map = {'/mnt/c': 'C:'}
#     let g:use_windows_apps = 1
#
# - repo: ernstwi/vim-secret
#   on_cmd: [Secret]
#
# - repo: dense-analysis/ale
#   on_ft: [markdown]
#   hook_add: |
#     let g:ale_disable_lsp = 0
#     let g:ale_completion_enabled = 0
#     let g:ale_fixers = {'python': ['black', 'isort']}
#     let g:ale_python_flake8_options = '--max-line-length=120 --ignore=E265,E266,501'
#     let g:ale_python_mypy_options = '--ignore-missing-imports'
#     let g:ale_python_pyls_options = '--ignore-missing-imports'
#     let g:ale_yaml_yamllint_options = '-d "{extends: relaxed, rules: {line-length: disable}}"'
#     let g:ale_lint_on_save = 1
#     let g:ale_lint_on_text_changed = 'never'
#     let g:ale_lint_on_insert_leave = 1
#     let g:ale_lint_on_enter = 1
#     let g:ale_echo_msg_error_str = 'E'
#     let g:ale_echo_msg_warning_str = 'W'
#     let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
#     let g:ale_set_loclist = 1
#     let g:ale_set_quickfix = 0
#     let g:ale_open_list = 0
#     let g:ale_keep_list_window_open = 0
#     let g:ale_sign_error = '✗'
#     let g:ale_sign_warning = '⚠'
#     let g:ale_change_sign_column_color = 0
#     highlight clear ALEErrorSign
#     highlight clear ALEWarningSign
#     hi link ALEErrorSign    Error
#     hi link ALEWarningSign  Warning
#
# # let g:ale_linters = {'python': ['bandit', 'flake8', 'mypy', 'prospector', 'pycodestyle', 'pydocstyle', 'pyflakes', 'pylama', 'pylint', 'pyls', 'pyre', 'pyright', 'vulture']}
# # let g:ale_fixers = {'python': ['black', 'isort', 'autopep8']}
# # let g:ale_sign_error = "◉"
# # let g:ale_sign_warning = "◉"
#
# # - repo: neoclide/coc.nvim
# #   on_ft: python
#
# # -- Management / Tasks / ... ---
#
# # - repo: fcpg/vim-waikiki
# #   on_ft: [markdown, vimwiki, text]
# #   hook_source: |
# #     nmap <c-space> <Plug>(waikikiToggleListItem)
#
# # --------------------------------------------------
# # Markdown / Latex / Text (writing)
# # --------------------------------------------------
# # - repo: SidOfc/mkdx
# #   on_ft: [markdown, vimwiki]
# #   hook_add: |
# #     let g:mkdx#settings     = { 'highlight': { 'enable': 1 },
# #                             \ 'links': { 'external': { 'enable': 1, 'relative': 1 }, 'fragment': {'complete': 1, 'jumplist': 1 } },
# #                             \ 'toc': { 'text': 'Table of Contents', 'update_on_write': 1 },
# #                             \ 'fold': { 'enable': 0 },
# #                             \ 'map': { 'enable': 1 },
# #                             \ 'gf_on_steroids': 0,
# #                             \ 'checkbox': { 'toggles': [' ', '-', 'x'] },
# #                             \ 'tokens': { 'header': '#', 'enter': ['-', '*', '>'], 'fence': '`', 'list': '-', 'bold': '**', 'italic': '_', 'divider': '|' },
# #                             \ 'tab': {'enable': 0},
# #                             \ 'enter': {'enable': 1,  'shift': 0, 'o': 1, 'shifto': 1, 'malformed': 1 },
# #                             \ }
# #     call config#mkdx_mappings()
# #   hook_source: |
# #     set foldmethod=expr
#
# #    let g:polyglot_disabled = ['markdown']
#
# #   on_ft: [ text, vimwiki, markdown ]
#

# # - repo: gera2ld/markmap or dundalek/markmap
# #     hook_source: |
# #       augroup markmap_group
# #         au! FileType markdown command! MarkMap :!markmap %:p
# #       augroup END
# # - repo: michal-h21/vimwiki-sync
#
# # - repo:  vim-pandoc/vim-markdownfootnotes
# #   on_ft: [ markdown, vimwiki, vimwiki.markdown ]
# #   hook_add: |
# #     nmap <buffer> <c-f>n <Plug>AddVimFootnote
# #     imap <buffer> <c-f>n <Plug>AddVimFootnote
# #     imap <buffer> <c-f>r <Plug>ReturnFromFootnote
# #     nmap <buffer> <c-f>r <Plug>ReturnFromFootnote
#
# # to sort footnotes: https://github.com/derdennis/sort-markdown-footnotes (but I would need to remove the "fn" from the footnotes) -> or just use pandoc for everything
#
#
# - repo: lervag/vimtex
#   on_ft: [tex]
#   hook_add: |
#     let g:tex_flavor='latex'
#     let g:vimtex_view_method='zathura'
#     let g:vimtex_quickfix_mode=0
#     set conceallevel=1
#     let g:tex_conceal='abdmg'
#
#
# - repo: godlygeek/tabular
#   on_ft: [markdown, latex, tex]
#   on_cmd: [Tab]
#
#
# # # - repo: reedes/vim-pencil
# #   on_ft: [tex, markdown, vimwiki]
#
#
# # - repo: masukomi/vim-markdown-folding
# #   on_ft: [vimwiki, markdown]
# #   hook_add: |
# #     let g:markdown_fold_style = 'nested'
#
# # --------------------------------------------------
# # Organisation
# # --------------------------------------------------
#
# - repo: soywod/kronos.vim
#   on_cmd: [Kronos]
#   hook_add: |
#     command! TimeTracker Kronos
#
# # - repo: unfog-io/unfog-vim
# # on_cmd: [Unfog]
# #  hook_add: |
# #    command! TimeTracker Unfog<cr>
#
# # --------------------------------------------------
# # Programming language support
# # --------------------------------------------------
#
# # - repo: sakhnik/nvim-gdb
# #   build: sh ./install.sh
#
# # https://reposhub.com/python/command-line-tools/puremourning-vimspector.html
# # https://puremourning.github.io/vimspector-web/demo-setup.html
# # https://github.com/puremourning/vimspector
# - repo: puremourning/vimspector
#   build: sh ./install_gadget.py --enable-python
#   on_ft: [python, cpp, lua, vim, swift, c]
#   hook_add: |
#     let g:vimspector_install_gadgets = [ 'debugpy', 'vscode-cpptools', 'CodeLLDB' ]
#     let g:vimspector_enable_mappings = ''
#     augroup group_vimspector
#       autocmd!
#       autocmd FileType python,cpp,d,lua,swift,vim,c nmap <F5> <Plug>VimspectorContinue
#       autocmd FileType python,cpp,d,lua,swift,vim,c nmap <leader>F5 <Plug>VimspectorRestart
#       autocmd FileType python,cpp,d,lua,swift,vim,c nmap <leader>0 :VimspectorReset<cr>
#       autocmd FileType python,cpp,d,lua,swift,vim,c nmap <F9> <Plug>VimspectorToggleBreakpoint
#       autocmd FileType python,cpp,d,lua,swift,vim,c nmap <F3> Plug>VimspectorPause
#       autocmd FileType python,cpp,d,lua,swift,vim,c nmap <leader><F3> <Plug>VimspectorStop
#       autocmd FileType python,cpp,d,lua,swift,vim,c nmap <F8> Plug>VimspectorAddFunctionBreakpoint
#       autocmd FileType python,cpp,d,lua,swift,vim,c nmap <leader><F8> Plug>VimspectorToggleConditionalBreakpoint
#       autocmd FileType python,cpp,d,lua,swift,vim,c nmap <F10> Plug>VimspectorStepOver
#       autocmd FileType python,cpp,d,lua,swift,vim,c nmap <F11> Plug>VimspectorStepInto
#       autocmd FileType python,cpp,d,lua,swift,vim,c nmap <F12> Plug>VimspectorStepOut
#       autocmd FileType python,cpp,d,lua,swift,vim,c nmap <F2> Plug>VimspectorRunToCursor
#     augroup END
#
#
# - repo: lambdalisue/vim-pyenv
#   on_cmd: [PyenvActivate, PyenvDeactivate, PyenvCreateCtags, PyenvAssignCtags, PyenvWithdrawCtags]
#
# # https://dev.to/moinmoti/nim-on-neovim-24d3
#
# - repo:  zah/nim.vim
#   on_ft: [nim]
#
# # - repo:  JuliaEditorSupport/julia-vim
#
#
# - repo: JesseKPhillips/d.vim
#   on_ft: [d, dlang, diet]
#
# # -------------------------------------------------------
# # Completion
# # -------------------------------------------------------
#
# # - repo: landaire/deoplete-d
# #   on_ft: [d, diet]
#
# # -------------------------------------------------------
# # Watch
# # -------------------------------------------------------
# # sentientmachine/Pretty-Vim-Python : python syntax highlighting
# # tpope/vim-sensible : defaults anyone agrees on

# - repo: wancocoding/pi2md
#   on_ft: [markdown, text, vimwiki]
#   hook_add: |
#     let g:pi2mdSettings = {
#         \ 'debug': 1,
#         \ 'storage': 0,
#         \ 'storage_local_position_type': 0,
#         \ 'storage_local_dir_name': 'img',
#         \ 'storage_local_absolute_path': '',
#         \ 'storage_local_prefer_relative_path': 1,
#         \ 'storage_cloud_tool': '',
#         \ 'storage_cloud_picgocore_path': '',
#         \ 'storage_cloud_picgoapp_api_server_port': ''
#       \ }
#     au FileType markdow,text,vimwiki,vimwiki.markdown command! -nargs=? PasteImg Pi2md <args>


