# ---
# PLUGINS local to kraxli/vim-config
# see: ~/.cache/vim/dein/repos
# ==========================================

# --- Disable plugins from Rafi ---
- {repo: rhysd/vim-gfm-syntax, if: 0}
- {repo: neoclide/coc.nvim, if: 0}
# - {repo: vimwiki/vimwiki, if: 0}
- {repo: nathanaelkane/vim-indent-guides, if: 0}
- {repo: kraxli/vim-markdown, if: 0}
# - {repo: plasticboy/vim-markdown, if: 0}

# --------------------------------------------------
# Base plugins
# --------------------------------------------------
- repo: pbrisbin/vim-mkdir

- repo: Yggdroot/indentLine
  hook_add: |
    let g:indentLine_char_list = ['¦', '┊']
    let g:indentLine_concealcursor = 'nc'
    let g:indentLine_conceallevel = 2

# let g:indentLine_char_list = ['|', '¦', '┆', '┊'] or ¦, ┆, │, ⎸, ▏, ':'
# let g:indentLine_concealcursor = 'inc'

# - repo: kraxli/vim-config-addons

# --------------------------------------------------
# Lazily loading plugins
# --------------------------------------------------

- repo: tpope/vim-scriptease
  on_cmd: [Scriptnames, Messages, Time, Breakadd, Breakdel, PP, Runtime, Disarm, Verbose, Vedit, Vsplit, Vtabedit]
  on_map: [zS, g=] # K

- repo: tpope/vim-fugitive
  on_cmd: [ G, Git, Gedit, Gsplit, Gvsplit, Gfetch, Gpush, Gpull, Glog, Gclog, Gdiffsplit, Gbrowse, Gread, Gwrite, Ggrep, Gmove, Grename, Gdelete, Gblame, Gmerge, Ghdiffsplit, Gvdiffsplit, Gwq, Gpedit, Gtabedit, Glcd, Gcd, 0Git, Glgrep, Ggrep, Gfetch, Gcommit ]
  hook_source:
    augroup user_fugitive_plugin
      autocmd!
      autocmd FileType fugitiveblame normal A
    augroup END

# if: exists(expand(execute('pwd') . '/.git', 1))
# Git mergetool, Git difftool

- repo: junegunn/gv.vim
  depends: vim-fugitive
  on_cmd: GV

- repo:  liuchengxu/vim-which-key
  on_cmd: [WhichKey, WhichKey!]

- repo:  junegunn/vim-peekaboo
  on_map: [\", \@, CTRL-R]

- repo: vim-scripts/VisIncr
  on_cmd: [I, II, IMOD, IREP, IMDY, IYMD, IDMY, ID, IM, IA, IX, IIX, IB, IIB,
           \  IO, IIO, IR, IIR, IPOW, IIPOW, RI, RII, RIMOD, RIREP, RIMDY,
           \  RIYMD, RIDMY, RID, RIM, RIA, RIX, RIIX, RIB, RIIB, RIO, RIIO, RIR,
           \  RIIR, RIPOW, RIIPOW]

- repo: skywind3000/asyncrun.vim
  on_cmd: [AsyncRun, AsyncStop]

- repo: embear/vim-foldsearch
  on_cmd: [Fw, Fs, Fp, FS, Fl, Fc, Fi, Fd, Fe, TasksOpen]
  on_map: [to]
  on_ft: [text, vimwiki, markdown]
  hook_add: |
    let g:foldsearch_highlight=0
    let g:foldsearch_disable_mappings=1
    nmap  <Leader>fw :Fw<cr>
    nmap  <Leader>fs :Fs<cr>
    nmap  <Leader>fS :FS<cr>
    nmap  <Leader>fl :Fl<cr>
    nmap  <Leader>fi :Fi<cr>
    nmap  <Leader>fd :Fd<cr>
    nmap  <Leader>fe :Fe<cr>
    nmap  <silent> ze :Fe<cr>


# -- ColorSchemes --
# see config/theme.vim for speedup config/init.vim
- {repo: tomasiser/vim-code-dark, on_cmd: colorscheme codedark}
- {repo: NLKNguyen/papercolor-theme, on_cmd: colorscheme PaperColor}
- {repo: sjl/badwolf, on_cmd: colorscheme badwolf}

- {repo: tpope/vim-repeat, on_map: .}

# qpkorr/vim-renamer
- repo: kraxli/vim-renamer
  on_cmd: Renamer
  hook_add: |
    if has('dos16')||has('dos32')||has('win16')||has('win32')||has('win64')
    \ ||has('win32unix')||has('win95')
      let g:RenamerShowHidden=0
    else
      let g:RenamerShowHidden=1
    endif


- repo:  samoshkin/vim-mergetool
  on_cmd: [MergetoolStart, MergetoolToggle]


# - repo: metakirby5/codi.vimcodi
#   on_cmd: Codi

- repo: dbakker/vim-projectroot
  hook_add: |
    let g:rootmarkers = ['.git', 'dub.json', 'dub.sdl', 'index.md',
    \ 'index.wiki', '.projectroot', '.svn']
    augroup user_project_root
      autocmd!
      autocmd! BufEnter,BufRead *.* ProjectRootLCD
    augroup END


- repo:  pianocomposer321/project-templates.nvim
  on_cmd: [LoadTemplate, SaveAsTemplate, DeleteTemplate]


- repo:  samoshkin/vim-mergetool
  on_cmd: [MergetoolToggle, MergetoolStart]
  hook_add: nmap ;mt <plug>(MergetoolToggle)


- repo: xolox/vim-shell
  on_cmd: Open
  on_map: <F6>
  hook_add: |
    let g:shell_verify_urls = 1
    nmap gx <Nop>
    vmap gx <Nop>
    nmap gx :Open<cr>
    vmap gx :Open<cr>


- repo: xolox/vim-misc
  on_source: vim-shell


# - repo: dense-analysis/ale
#   on_ft: [python]
#   hook_add: |
#     let g:ale_disable_lsp = 1
#     let g:ale_linters = {'python': ['pycodestyle']}
#     let g:ale_fixers = {'python': ['autopep8']}
#     let g:ale_lint_on_save = 1
#     let g:ale_lint_on_text_changed = 'never'
#     let g:ale_lint_on_insert_leave = 0
#     let g:ale_lint_on_enter = 1
#     let g:ale_completion_enabled = 0
#     let g:ale_sign_error = 'E>'
#     let g:ale_sign_warning = 'W-'
#     let g:ale_echo_msg_error_str = 'E'
#     let g:ale_echo_msg_warning_str = 'W'
#     let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
#     let g:ale_set_loclist = 1
#     let g:ale_set_quickfix = 0
#     let g:ale_open_list = 0
#     let g:ale_keep_list_window_open = 0
#     let g:ale_sign_error = '✗'
#     let g:ale_sign_warning = '⚠'

#    let g:ale_linters = {'python': ['pyls']}

# -- Management / Tasks / ... ---

# - repo: fcpg/vim-waikiki
#   on_ft: [markdown, vimwiki, text]
#   hook_source: |
#     nmap <c-space> <Plug>(waikikiToggleListItem)

# --------------------------------------------------
# Markdown / Latex / Text (writing)
# --------------------------------------------------
# - repo: SidOfc/mkdx
#   on_ft: [markdown, vimwiki]
#   hook_add: |
#     let g:mkdx#settings     = { 'highlight': { 'enable': 1 },
#                             \ 'links': { 'external': { 'enable': 1, 'relative': 1 }, 'fragment': {'complete': 1, 'jumplist': 1 } },
#                             \ 'toc': { 'text': 'Table of Contents', 'update_on_write': 1 },
#                             \ 'fold': { 'enable': 0 },
#                             \ 'map': { 'enable': 1 },
#                             \ 'gf_on_steroids': 0,
#                             \ 'checkbox': { 'toggles': [' ', '-', 'x'] },
#                             \ 'tokens': { 'header': '#', 'enter': ['-', '*', '>'], 'fence': '`', 'list': '-', 'bold': '**', 'italic': '_', 'divider': '|' },
#                             \ 'tab': {'enable': 0},
#                             \ 'enter': {'enable': 1,  'shift': 0, 'o': 1, 'shifto': 1, 'malformed': 1 },
#                             \ }
#     call config#mkdx_mappings()
#   hook_source: |
#     set foldmethod=expr

#    let g:polyglot_disabled = ['markdown']

- repo: kraxli/vim-mkd-fold
  on_ft: [text, vimwiki, markdown]
  hook_add: |
    let g:markdown_list_folding = 1
    let g:mkdd_use_mkdx = 1
    set foldmethod=expr


- repo: kraxli/vim-mkd-org
  depends: [vimwiki, fzf, fzf.vim]
  on_ft: [text, markdown, vimwiki]
  hook_add: |
    let g:mkdd_task_done_symbols = ''
    let g:mkdd_mapping_switch_status = ''
    let g:mkdd_mapping_switch_status = ''
    let g:mkdd_mapping_switch_status_down = ''
    let g:mkdd_wiki_index_key = '<leader>W'
    let g:mkdd_blog_index_key = '<leader>B'
    nmap <silent> th :TasksOpenHi<cr>
    au BufReadPre,BufEnter,BufRead,BufNewFile *.wiki,*.md set foldmethod=expr
  hook_source: |
    nmap to :TasksOpen<cr>

# - repo: michal-h21/vim-zettel
#   hook_add: |
#     let s:vimwiki_list = {
#         \ 'path':'~/Dropbox/PKD/zettelk',
#         \ 'ext':'.md',
#         \ 'syntax':'markdown'
#         \ }
#     if exists('g:vimwiki_list')
#       let g:vimwiki_list = add(g:vimwiki_list, s:vimwiki_list)
#     else
#       let g:vimwiki_list = [s:vimwiki_list]
#     endif
#     let g:zettel_options = [{}, {}, {"~/Dropbox/PKD/zettelk" : [["tags", ""], ["type","note"]],
#       \ "template" :  "~/mytemplate.tpl", 'syntax': 'markdown', 'ext': '.md'}]

# - repo: alok/notational-fzf-vim
# - repo: gera2ld/markmap / dundalek/markmap

- repo: kraxli/vim-snips
  depends: ultisnips
  on_event: FileType
  if: has('python3')
  merged: 0


- repo: lervag/vimtex
  on_ft: [tex]
  hook_add: |
    let g:tex_flavor='latex'
    let g:vimtex_view_method='zathura'
    let g:vimtex_quickfix_mode=0
    set conceallevel=1
    let g:tex_conceal='abdmg'


- repo: godlygeek/tabular
  on_ft: [markdown, latex, tex]
  on_cmd: [Tab]


- repo: iamcco/markdown-preview.nvim
  build: sh -c "cd app && ./install.sh"
  on_ft: [markdown, latex, tex, pandoc.markdown, rmd]
  on_cmd: [MarkdownPreview, MarkdownPreviewToggle]
  hook_add: |
    let g:mkdp_auto_start = 0
    let g:mkdp_auto_close = 0
    let g:mkdp_browser=''
    let g:mkdp_page_title = '${name}'
    let g:mkdp_filetypes = ['markdown', 'vimwiki']
    command! Pv :MarkdownPreview
    nmap <leader>pv <Plug>MarkdownPreviewToggle

# - repo: reedes/vim-pencil
#   on_ft: [tex, markdown, vimwiki]


# - repo: masukomi/vim-markdown-folding
#   on_ft: [vimwiki, markdown]
#   hook_add: |
#     let g:markdown_fold_style = 'nested'

# --------------------------------------------------
# Organisation
# --------------------------------------------------

- repo: soywod/kronos.vim
  on_cmd: [Kronos]
  hook_add: |
    command! TimeTracker Kronos

# - repo: unfog-io/unfog-vim
# on_cmd: [Unfog]
#  hook_add: |
#    command! TimeTracker Unfog<cr>

# --------------------------------------------------
# Programming language support
# --------------------------------------------------

# - repo: sakhnik/nvim-gdb
#   build: sh ./install.sh

- repo: puremourning/vimspector
  build: sh ./install_gadget.py --enable-python
  on_ft: [python, cpp]
  hook_add: |
    let g:vimspector_install_gadgets = [ 'debugpy', 'vscode-cpptools', 'CodeLLDB' ]
    let g:vimspector_enable_mappings = ''
    augroup group_vimspector
      autocmd!
      autocmd FileType python,cpp,d nmap <F5> <Plug>VimspectorContinue
      autocmd FileType python,cpp,d nmap <leader>F5 <Plug>VimspectorRestart
      autocmd FileType python,cpp,d nmap <leader>0 :VimspectorReset<cr>
      autocmd FileType python,cpp,d nmap <F9> <Plug>VimspectorToggleBreakpoint
      autocmd FileType python,cpp,d nmap <F3> Plug>VimspectorPause
      autocmd FileType python,cpp,d nmap <leader><F3> <Plug>VimspectorStop
      autocmd FileType python,cpp,d nmap <F8> Plug>VimspectorAddFunctionBreakpoint
      autocmd FileType python,cpp,d nmap <leader><F8> Plug>VimspectorToggleConditionalBreakpoint
      autocmd FileType python,cpp,d nmap <F10> Plug>VimspectorStepOver
      autocmd FileType python,cpp,d nmap <F11> Plug>VimspectorStepInto
      autocmd FileType python,cpp,d nmap <F12> Plug>VimspectorStepOut
      autocmd FileType python,cpp,d nmap <F2> Plug>VimspectorRunToCursor
    augroup END


# https://dev.to/moinmoti/nim-on-neovim-24d3

- repo:  zah/nim.vim
  on_ft: [nim]

# - repo:  JuliaEditorSupport/julia-vim


- repo: JesseKPhillips/d.vim
  on_ft: [d, dlang, diet]

# -------------------------------------------------------
# Completion
# -------------------------------------------------------

# - repo: landaire/deoplete-d
#   on_ft: [d, diet]

# -------------------------------------------------------
# Watch
# -------------------------------------------------------
# sentientmachine/Pretty-Vim-Python : python syntax highlighting
# tpope/vim-sensible : defaults anyone agrees on

